import time
import datetime
import tkinter as tk
import GA
from random import randint

#########################################
######                             ######
######    Game parameters:         ######
######                             ######
#########################################

# Number of Rows
g_height = 16

# Number of Columns
g_width = 12

# dictionary for colors and their numbers as keys
color_values = {'0': 'White', '1': 'Red', '2': 'Blue', '3': 'Green'}

class App(tk.Tk):
    """
    Runs the application
    """

    def __init__(self):
        '''
        Initiates an App object to run
        '''

        # Initiates a window object & sets its title
        self.window = tk.Tk()
        self.window.geometry('{}x{}'.format(475, 500))
        self.window.wm_title("SameGame - Genetic Algorithm")

        # initiates a canvas for displaying the SameGame
        self.canvas = tk.Canvas(self.window, height=400, width=451, highlightthickness=0, borderwidth=0)

        # Initiates a label
        self.canvas_title = tk.Label(self.window, text="SameGame")

        # Initiates status bars to keep track of best, worst, and average scores
        self.best_tk_txt = tk.StringVar()
        self.best_tk_txt.set("Best Score:")
        self.best_label = tk.Label(self.window, textvariable=self.best_tk_txt, relief=tk.SUNKEN, anchor=tk.W)
        self.worst_tk_txt = tk.StringVar()
        self.worst_tk_txt.set("Worst Score:")
        self.worst_label = tk.Label(self.window, textvariable=self.worst_tk_txt, relief=tk.SUNKEN, anchor=tk.W)
        self.average_tk_txt = tk.StringVar()
        self.average_tk_txt.set("Average Score:")
        self.average_label = tk.Label(self.window, textvariable=self.average_tk_txt, relief=tk.SUNKEN, anchor=tk.W)

        #Initiate buttons for generating a random new SameGame and for starting the GA
        self.start_btn = tk.Button(self.window, text="Start GA", command=lambda: self.GA_loop())
        self.start_btn.pack(side=tk.BOTTOM)
        self.generate_btn = tk.Button(self.window, text="Generate New", command=lambda: self.draw_SameGame())
        self.generate_btn.pack(side=tk.BOTTOM)
        self.next_btn = tk.Button(self.window, text="Next", command=lambda: self.next_move())
        self.next_btn.pack(side=tk.BOTTOM)
        # Packs all the widgets (physically creates them and places them in order)

        self.canvas_title.pack()
        self.best_label.pack(side=tk.BOTTOM, fill=tk.X)
        self.worst_label.pack(side=tk.BOTTOM, fill=tk.X)
        self.average_label.pack(side=tk.BOTTOM, fill=tk.X)
        self.canvas.pack()

        # Initialize GUI constants
        self.rows = g_height
        self.columns = g_width
        self.cellwidth = 25
        self.cellheight = 25
        self.textoffset = 15

        #Initialize dictionaries for cell rectangles and numbers
        self.rect = {}
        self.grid = {}
        self.g = {}
        self.s = {}
        self.best_score = 0
        self.worst_score = 0
        self.average_score = 0
        self.move_num = 0

    def GA_loop(self):
        self.s = GA.solve(self.g,[1,0,1,0,0])
        print("Next move will be: ", self.s["moves"][self.move_num])

    def next_move(self):
        print("Performing move: ", self.s["moves"][self.move_num])
        self.best_score += (len(self.s["moves"][self.move_num]) - 1) ** 2
        self.g = GA.postMove(self.g, self.s["moves"][self.move_num])
        self.draw_SameGame(self.g)
        self.best_tk_txt.set("Best Score: " + str(self.best_score))
        self.move_num += 1
        print("Next move will be: ", self.s["moves"][self.move_num])

    def get_cellValue(self, row, column):
        # Get the value associated with a cell and return it
        value = self.g[row, column]
        return value

    def draw_SameGame(self, board):
        # Clears the canvas of previous elements
        self.canvas.delete("all")

        # Draws the board
        for column in range(g_width):
            for row in range(g_height):
                x1 = (self.columns - column - 1) * self.cellwidth
                y1 = row * self.cellheight
                x2 = x1 + self.cellwidth
                y2 = y1 + self.cellheight
                textNum = board[row, column]
                cellColor = color_values[str(textNum)]
                self.g[row, column] = textNum
                self.rect[row, column] = self.canvas.create_rectangle(y1, x1, y2, x2, fill=cellColor, tags=(row, column))
                self.grid[row, column] = self.canvas.create_text(y1 + self.textoffset, x1 + self.textoffset, fill="black", text=textNum,tags = textNum)

    def window_loop(self):
        '''
        Used to wraps the GA_loop() method and initiates the window on top of the logic.
        window.mainloop() hogs the Thread, that's why the GA_loop needs to be called as a callback
        '''
        board = GA.genBoard(1, 1)
        app.draw_SameGame(board)
        self.window.mainloop()

if __name__ == '__main__':
    try:
        start_time = time.time()
        app = App()
        app.window_loop()
    except Exception as e:
        print("\n[ERROR]: %s\n" % e)
